uses 'Global.feh';
uses 'Game/Engine.feh';
uses 'Game/Events.feh';
uses 'Game/Network_ENet.feh';
uses 'Game/Messages_ENet.feh';
uses 'Game/Console.feh';
uses 'Game/ConsoleCommands.feh';
uses 'Game/States.feh';
uses 'Game/Menus.feh';
uses 'Game/Map.feh';
uses 'Game/Entities.feh';
uses 'Game/Controllers.feh';
uses 'Game/Weapons.feh';

namespace Time {
	number current;
	number last;
	number delta;
}

class modifies Game {
	static boolean running;
	
	static object menuState;
	static object testState;
	static object multiplayerState;
	static object currentState;
	
	static array players;
	
	static boolean showFPS = false;
	static boolean showCollisionRectangles = false;
	
	static function run() {
		if( not .running ) {
			object player;
			object playerController;
			object background;
			
			array frameTimes = [];
			number frameTimesIndex;
			number frameCount;
			number framesPerSecond;
			number count;
			
			object font;
			
			object this = new Game();
			EventHandler.registerListener(Engine.EVENT_QUIT, this);
			
			Engine.setScreen(Global.DefaultScreenWidth, Global.DefaultScreenHeight, Global.DefaultFullScreenState);
			//Engine.setScreen(1280, 800, true);
			//Engine.setScreen(640, 480, true);
			
			font = Engine.loadFont(Global.FontFPS, 10, 10);
			
			Console.init(Engine.loadFont(Global.FontConsole, 10, 10, -2));
			//Console.init(Engine.loadFont('font-bachler.bmp', 10, 10));
			//Console.init(font);
			
			Console.registerCommand('quit', closure( parameters ) {
				Game.quit();
			});
			.registerConsoleCommands();
			
			Time.current = Engine.currentTime();
			Time.last = Time.current;
			Time.delta = 0;
			
			if( argv.size() == 2 and argv[1] == 'test' ) {
				.multiplayerState().setConnectAutomatically('localhost', Global.ServerDefaultPort);
				Game.setState(.multiplayerState());
			} else {
				Game.setState(.menuState());
			}
			
			.running = true;
			
			frameTimes = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
		    frameCount = 0;
		    framesPerSecond = 0;
		    
			Time.last = Engine.currentTime();
			
			while( .running and .currentState ) {
				Time.current = Engine.currentTime();
				Time.delta = Time.current - Time.last;
				Time.last = Time.current;
				
				// fps
				frameTimesIndex = frameCount % 10;
				frameTimes[frameTimesIndex] = Time.delta;

				frameCount++;
				if( frameCount < 10 ) {
					count = frameCount;
				} else {
					count = 10;
				}
				framesPerSecond = 0;
				for( number i = 0; i < count; i++ ) {
					framesPerSecond += frameTimes[i];
				}
				framesPerSecond /= count;
				framesPerSecond = (framesPerSecond > 0 ? (1000.0 / framesPerSecond).round() : 0);
				
				EventHandler.update();
				MessageHandler.update();
				.currentState.update();
				
				Engine.clearScreen();
				.currentState.draw();
				Console.draw();
				
				Game.showFPS and font.drawText("$framesPerSecond", Engine.screenWidth() - font.textWidth("$framesPerSecond") - 5, 5);
				
				Engine.updateScreen();
			}
			
			.menuState and .menuState.quit();
			.multiplayerState and .multiplayerState.quit();
			Engine.unloadImageResources();
		}
	}
	static function quit() {
		.running = false;
	}
	
	static function menuState() {
		if( not .menuState )
			.menuState = new MenuState();
		return .menuState;
	}
	static function testState() {
		if( not .testState )
			.testState = new TestState();
		return .testState;
	}
	static function multiplayerState() {
		if( not .multiplayerState )
			.multiplayerState = new MultiplayerState();
		return .multiplayerState;
	}
	static function setState( object state ) {
		if( .currentState )
			.currentState.quit();
		.currentState = state;
		.currentState.init();
	}
	
	function onQuit( object event ) {
		Game.quit();
	}
}

Engine.printLine("Hello World!");
Game.run();

