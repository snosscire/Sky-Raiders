uses 'Global.feh';
uses 'Game/Array.feh';
uses 'Game/String.feh';
uses 'Game/Engine.feh';
uses 'Game/Network_ENet.feh';
uses 'Game/Messages_ENet.feh';
uses 'Game/Menus.feh';
uses 'Game/Console.feh';
uses 'Game/Events.feh';

global {
	boolean runServer = true;
}

namespace Time {
	number current;
	number last;
	number delta;
}

namespace GameServer {
	number nextID = 255;
	number roundTime;
	number restartTime;
	number nextDisconnectCheck;
	string mapName;
	number spawnLocationIndex = 0;
	number colorIndex = 0;
	array players;
}

class Player {
	object peer;
	number id;
	string name;
	number x;
	number y;
	number spawnLocationX;
	number spawnLocationY;
	number angle;
	number spriteAngle;
	number speed;
	number health;
	number score;
	number lastUpdate;
	number color;
}

function GetNextID() {
	number id = GameServer.nextID;
	GameServer.nextID--;
	return id;
}

function GetNextSpawnLocation() {
	array spawn;
	Engine.printLine("Map: ${GameServer.mapName}");
	spawn = Global.Maps[GameServer.mapName]['spawns'][GameServer.spawnLocationIndex];
	GameServer.spawnLocationIndex++;
	if( GameServer.spawnLocationIndex > 7 ) {
		GameServer.spawnLocationIndex = 0;
	}
	return spawn;
}

function GetNextColor() {
	number color = GameServer.colorIndex;
	GameServer.colorIndex++;
	if( GameServer.colorIndex > 7 ) {
		GameServer.colorIndex = 0;
	}
	return color;
}

function HandleConnect( object server, object connectMessage ) {
	Console.printLine('user connected - waiting for initialize message...');
}

function DisconnectPlayer( object server, number id ) {
	object playerDisconnectMessage;
	string playerDisconnectMessageData;
	object player;
	number index;
	for( number i = 0; i < GameServer.players.size(); i++ ) {
		object p = GameServer.players[i];
		if( p.id == id ) {
			index = i;
			player = p;
			break;
		}
	}
	Console.printLine("player ${player.name} disconnected.");
	playerDisconnectMessage = new Network.PlayerDisconnectMessage(player);
	playerDisconnectMessageData = playerDisconnectMessage.toData();
	GameServer.players.deleteAt(index);
	GameServer.players.each() using ( p ) {
		server.send(p.peer, playerDisconnectMessageData);
	};
}

function HandleDisconnect( object server, object message ) {
	Console.printLine('user disconnected.');
}

function HandlePlayerDisconnect( object server, object dataMessage ) {
	object message = Network.PlayerDisconnectMessage.fromData(dataMessage.data, true);
	DisconnectPlayer(server, message.id);
}

function HandleInitializeJoin( object server, object dataMessage ) {
	object initializeJoinMessage = Network.InitializeJoinMessage.fromData(dataMessage.data, true);
	object newPlayer;
	object newPlayerMessage;
	string newPlayerMessageData;
	array spawnLocation = GetNextSpawnLocation();

	Console.printLine('initialize join message recieved - creating player...');
	
	newPlayer = new Player();
	newPlayer.peer = dataMessage.peer;
	newPlayer.id = GetNextID();
	newPlayer.name = initializeJoinMessage.name;
	newPlayer.x = spawnLocation['x'];
	newPlayer.y = spawnLocation['y'];
	newPlayer.spawnLocationX = newPlayer.x;
	newPlayer.spawnLocationY = newPlayer.y;
	newPlayer.angle = Global.PlayerStartAngle;
	newPlayer.spriteAngle = Global.PlayerStartAngle;
	newPlayer.speed = Global.PlayerSpeed;
	newPlayer.color = GetNextColor();

	Console.printLine("created player ${newPlayer.name} (${newPlayer.id}).");
	
	newPlayerMessage = Network.NewPlayerMessage.fromPlayer(newPlayer, GameServer.mapName);
	newPlayerMessageData = newPlayerMessage.toData();
	
	// Tell the new player that it has joined the game.
	server.send(newPlayer.peer, newPlayerMessageData);
	// Tell the new player about the players that are already connected.
	GameServer.players.each() using ( player ) {
		server.send(newPlayer.peer, Network.NewPlayerMessage.fromPlayer(player, GameServer.mapName).toData());
	};
	// Tell the already connected players that a new player has connected.
	GameServer.players.each() using ( player ) {
		server.send(player.peer, newPlayerMessageData);
	};
	
	GameServer.players["Player/${newPlayer.id}"] = newPlayer;
}

function HandlePlayerUpdate( object server, object dataMessage ) {
	string dataCopy = dataMessage.data;
	object message = Network.PlayerUpdateMessage.fromData(dataMessage.data, true);
	if( GameServer.players.keyExists("Player/${message.id}") ) {
		object player = GameServer.players["Player/${message.id}"];
		player.x = message.x;
		player.y = message.y;
		player.angle = message.angle;
		player.spriteAngle = message.spriteAngle;
		player.speed = message.speed;
		//player.health = message.health;
		player.lastUpdate = Time.current;
		GameServer.players.each() using ( player ) {
			if( player.id != message.id ) {
				server.send(player.peer, dataCopy);
			}
		};
	}
}

function HandlePlayerHit( object server, object dataMessage ) {
	string dataCopy = dataMessage.data;
	object message = Network.PlayerHitMessage.fromData(dataMessage.data, true);
	object player = GameServer.players["Player/${message.id}"];
	object shooter = GameServer.players["Player/${message.shooter}"];
	player.health = (message.health - message.damage);
	GameServer.players.each() using ( player ) {
		if( player.id != message.id ) {
			server.send(player.peer, dataCopy);
		}
	};
	if( player.health > 0 ) {
		Console.printLine("${shooter.name} (${shooter.id}) hit ${player.name} (${player.id}) for ${message.damage} damage.");
	} else {
		Console.printLine("${shooter.name} (${shooter.id}) killed ${player.name} (${player.id}).");
		shooter.score++;
	}
}

function HandleData( object server, object message ) {
	string dataCopy = message.data;
	number type = Network.readByteFromData(dataCopy);
	switch( type ) {
		case Network.MESSAGE_PLAYER_UPDATE:     HandlePlayerUpdate(server, message); break;
		case Network.MESSAGE_PLAYER_HIT:        HandlePlayerHit(server, message); break;
		case Network.MESSAGE_INITIALIZE_JOIN:   HandleInitializeJoin(server, message); break;
		case Network.MESSAGE_PLAYER_DISCONNECT: HandlePlayerDisconnect(server, message); break;
	}
}

function SendRoundEnd( object server ) {
	if( GameServer.players ) {
		object winner;
		number highestScore;
		object message;
		string data;
		GameServer.players.each() using ( player ) {
			if( player.score >= highestScore ) {
				highestScore = player.score;
				winner = player;
			}
		};
		Console.printLine("winner of this round is ${winner.name}.");
		message = new Network.RoundEndMessage(winner.id);
		data = message.toData();
		GameServer.players.each() using ( player ) {
			server.send(player.peer, data);
		};
		server.flush();
	}
}

function SendGameRestart( object server ) {
	object message = new Network.GameRestartMessage();
	string data = message.toData();
	GameServer.players.each() using ( player ) {
		player.x = player.spawnLocationX;
		player.y = player.spawnLocationY;
		player.angle = Global.PlayerStartAngle;
		player.spriteAngle = Global.PlayerStartAngle;
		player.health = Global.PlayerStartHealth;
		player.score = 0;
		server.send(player.peer, data);
	};
	server.flush();
}

class Listener {
	function onQuit( object event ) {
		runServer = false;
	}
}

number port = Global.ServerDefaultPort;
object server;

boolean roundEndMessageSent = false;

object listener;
object message;
object event;

object menu = new ImageMenu();
menu.setImage("create_game_menu_dedicated.png");
menu.addInvisibleButton("StartButton", 301, 436, 190, 83) using {
	Console.printLine("trying to start server at port ${port}...");
	server = Network.Server.start(port);
	if( server ) {
		Console.printLine("server started.");
		GameServer.nextDisconnectCheck = Time.current + 10000;
		GameServer.roundTime = Global.ServerRoundTime;
		menu.active = false;
		Console.toggle();
		Console.canToggle = false;
	}
};
menu.addInvisibleSlider("MapSlider", 109, 320, 555, 23, [ "Dead City", "Peaks" ]) using ( string item ) {
	if( item == "Dead City" ) {
		menu.getItem("MapLabel").setImage("GUI/map_dead_city.png");
	} else if( item == "Peaks" ) {
		menu.getItem("MapLabel").setImage("GUI/map_peaks.png");
	}
	GameServer.mapName = item;
};
menu.addImage("MapLabel", 330, 288);
menu.getItem("MapLabel").setImage("GUI/map_dead_city.png");
menu.registerListeners();
menu.active = true;

GameServer.mapName = "Dead City";

Engine.setScreen(800, 600, false);

Console.init(Engine.loadFont(Global.FontConsole, 10, 10, -2));
Console.setHeight(Engine.screenHeight());

listener = new Listener();
EventHandler.registerListener(Engine.EVENT_QUIT, listener);

Time.current = Engine.currentTime();
Time.last = Time.current;
Time.delta = 0;

while( runServer ) {
	Time.current = Engine.currentTime();
	Time.delta = Time.current - Time.last;
	Time.last = Time.current;
	
	EventHandler.update();
	Engine.clearScreen();
	menu.draw();
	Console.draw();
	Engine.updateScreen();
	
	if( server ) {
		GameServer.roundTime -= Time.delta;
	
		if( GameServer.roundTime <= 0 and roundEndMessageSent == false ) {
			Console.printLine("time is up. end of round. see you next time.");
			SendRoundEnd(server);
			GameServer.restartTime = Global.ServerRestartTime;
			roundEndMessageSent = true;
		} else {
			if( roundEndMessageSent ) {
				GameServer.restartTime -= Time.delta;
				if( GameServer.restartTime <= 0 ) {
					GameServer.roundTime = Global.ServerRoundTime;
					roundEndMessageSent = false;
					SendGameRestart(server);
				}
			}
		}

		while( message = server.service(10) ) {
			if( not roundEndMessageSent ) {
				switch( message.type ) {
					case Network.MESSAGE_CONNECT:    HandleConnect(server, message); break;
					case Network.MESSAGE_DISCONNECT: HandleDisconnect(server, message); break;
					case Network.MESSAGE_DATA:       HandleData(server, message); break;
				}
			}
		}
		if( Time.current >= GameServer.nextDisconnectCheck ) {
			array inactivePlayers = [];
			GameServer.players.each() using ( player ) {
				if( Time.current >= player.lastUpdate + 60000 ) {
					inactivePlayers[] = player.id;
				}
			};
			inactivePlayers.each() using ( id ) {
				DisconnectPlayer(server, id);
			};
			GameServer.nextDisconnectCheck = Time.current + 10000;
		}
	}
}

server and server.destroy();

