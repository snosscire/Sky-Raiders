class State {
	boolean active;
	boolean listenersRegistered;
	function init();
	function quit();
	function update();
	function draw();
}

class TestState extends State {
	object map;
	object playerCamera;
	object player;
	function init() {
		.map = Map.load("Test");
		
		.playerCamera = new Camera();
		
		.player = new Player();
		.player.controller = new KeyboardPlayerController(.player);
		.player.controller.keyLeft = Engine.KEY_LEFT;
		.player.controller.keyRight = Engine.KEY_RIGHT;
		.player.controller.keyShoot = Engine.KEY_SPACE;
		.player.controller.keyKill = Engine.KEY_k;
		.player.weapon = new MachineGun(.player);
		.player.speed = Global.PlayerSpeed;
		.player.turningSpeed = Global.PlayerTurningSpeed;
		.player.x = Global.PlayerStartX;
		.player.y = Global.PlayerStartY;
		
		.active = true;
		
		if( not .listenersRegistered ) {
			EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
		}
	}
	function quit() {
		.active = false;
		.player = null;
		.map.unload();
		.map = null;
	}
	function update() {
		//number deltaTime = Time.delta;
		//while( deltaTime > 0 ) {
		//	.player.update(deltaTime);
		//	deltaTime -= 5;
		//}
		.player.update(Time.delta, .map);
		.playerCamera.update(.map, .player);
		.map.update(.playerCamera);
	}
	function draw() {
		.map.drawBackground();
		.player.draw(.playerCamera, .map);
		.map.drawForeground();
	}
	function onKeyDown( object event ) {
		if( .active and (not Console.active) ) {
			if( event.key == Engine.KEY_ESCAPE ) {
				Game.setState(Game.menuState());
			}
		}
	}
}

class MultiplayerState extends State {
	object client;
	boolean connected;
	object currentMap;
	object playerCamera;
	object localPlayer;
	array players;
	boolean connectAutomatically;
	string host;
	number port;
	
	function setConnectAutomatically( string host, number port ) {
		.connectAutomatically = true;
		.host = host;
		.port = port;
	}
	
	function init() {
		if( not .listenersRegistered ) {
			EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
			MessageHandler.registerListener(Network.MESSAGE_DISCONNECT_ME, self);
			MessageHandler.registerListener(Network.MESSAGE_CONNECT, self);
			MessageHandler.registerListener(Network.MESSAGE_NEW_PLAYER, self);
			.listenersRegistered = true;
		}
		.currentMap = Map.load("Test");
		.playerCamera = new Camera();
		.connected = false;
		.active = true;
		if( .connectAutomatically ) {
			Console.printLine("------------------ connect ----------------------");
			Console.printLine("connecting to ${.host}:${.port}...");
			Console.flush();
			Network.disconnect();
			if( Network.connect(.host, .port, 'Player') ) {
				Console.printLine('waiting for response....');
			} else {
				Console.printLine('failed.');
			}
		}
	}
	function quit() {
		.active = false;
		.connected = false;
		.currentMap and .currentMap.unload();
		.currentMap = null;
		.playerCamera = null;
		.localPlayer = null;
		.players = [];
		Game.players = [];
		Network.disconnect();
	}
	function update() {
		if( .connected ) {
			//number deltaTime;
			.players.each() using ( player ) {
				//player.me and Console.printLine('updating me...');
				player.update(Time.delta, .currentMap);
				//deltaTime = Time.delta;
				//Engine.printLine("Player: ${player.id}, delta time: ${deltaTime}");
				//while( deltaTime > 0 ) {
				//	player.update(deltaTime);
				//	deltaTime -= 5;
				//}
			};
			//.localPlayer.update(Time.delta, .currentMap);
			.playerCamera.update(.currentMap, .localPlayer);
			.currentMap.update(.playerCamera);
		}
	}
	function draw() {
		if( .connected ) {
			.currentMap.drawBackground();
			.players.each() using ( player ) {
				player.draw(.playerCamera, .currentMap);
			};
			//.localPlayer.draw(.playerCamera, .currentMap);
			.currentMap.drawForeground();
		}
	}
	
	function onKeyDown( object event ) {
		if( .active and (not Console.active) ) {
			if( event.key == Engine.KEY_ESCAPE ) {
				Game.setState(Game.menuState());
			}
		}
	}
	
	function createPlayer( object message, boolean me ) {
		object player;
		
		if( .players.keyExists("Player/${message.id}") )
			return; // This should not be possible but for some reason this happens sometimes.
		
		Console.printLine("creating player... ${me} (${message.id})");
		
		player = new Player();
		player.id = message.id;
		//player.name = message.name;
		player.me = me;
		player.health = Global.PlayerStartHealth;
		player.speed = Global.PlayerSpeed;
		player.turningSpeed = Global.PlayerTurningSpeed;
		player.x = message.x;
		player.y = message.y;
		
		if( me ) {
			//Console.printLine('using keyboard controller.');
			player.controller = new KeyboardPlayerController(player);
			player.controller.keyLeft = Engine.KEY_LEFT;
			player.controller.keyRight = Engine.KEY_RIGHT;
			player.controller.keyShoot = Engine.KEY_SPACE;
			.localPlayer = player;
		} else {
			player.controller = new NetworkPlayerController(player);
		}
		
		player.weapon = new MachineGun(player);
		
		.players["Player/${player.id}"] = player;
		Game.players[] = player;
	}
	
	function onConnect( object message ) {
		if( .active ) {
		}
	}
	function onDisconnectMe( object message ) {
		if( .active ) {
			Game.setState(Game.menuState());
		}
	}
	function onNewPlayer( object message ) {
		if( .active ) {
			boolean me = false;
			if( not .connected ) {
				me = true;
				.connected = true;
			}
			.createPlayer(message, me);
		}
	}
}

class MenuState extends State {
	object mainMenu;
	object multiplayerMenu;
	object currentMenu;
	function init() {
		object testState = new TestState();
		object font = Engine.loadFont('font-10.png', 10, 10);
		.mainMenu = new Menu();
		.mainMenu.setSelector('Menu/simple-selector.png');
		.mainMenu.addItem(new TextMenuItem(font, "test", closure {
			Game.setState(testState);
		}));
		.mainMenu.addItem(new TextMenuItem(font, "multiplayer", closure {
			Game.setState(Game.multiplayerState());
		}));
		.mainMenu.addItem(new TextMenuItem(font, "options"));
		.mainMenu.addItem(new TextMenuItem(font, "credits"));
		.mainMenu.addItem(new TextMenuItem(font, "quit", closure {
			Game.quit();
		}));
		.mainMenu.active = true;
		.multiplayerMenu = new Menu();
		.currentMenu = .mainMenu;
		.active = true;
		if( not .listenersRegistered ) {
			EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
			.listenersRegistered = true;
		}
	}
	function quit() {
		.active = false;
		.mainMenu = null;
		.multiplayerMenu = null;
		.currentMenu = null;
	}
	function update() {
		
	}
	function draw() {
		.currentMenu.draw();
	}
	function onKeyDown( object event ) {
		if( .active and (not Console.active) ) {
			if( event.key == Engine.KEY_ESCAPE ) {
				if( .currentMenu == .mainMenu ) {
					Game.quit();
				}
			}
		}
	}
}

