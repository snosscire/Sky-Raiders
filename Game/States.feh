class State {
	function init();
	function quit();
	function update();
	function draw();
}

class TestState extends State {
	object player;
	object background;
	object menuState;
	function constructor( object menuState ) {
		.menuState = menuState;
	}
	function init() {
		object playerController;
		playerController = new KeyboardController();
		playerController.keyLeft = Engine.KEY_LEFT;
		playerController.keyRight = Engine.KEY_RIGHT;
		.player = new Player();
		.player.controller = playerController;
		.player.speed = 1.8;
		.player.turningSpeed = 1.0;
		.player.x = 200;
		.player.y = 100;
		.background = Engine.loadImageResource('background.png');
		EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
	}
	function quit() {
		Engine.unloadImageResource(.background);
		.player = null;
	}
	function update() {
		.player.update();
	}
	function draw() {
		Engine.drawImage(.background, 0, 0);
		.player.draw();
	}
	function onKeyDown( object event ) {
		if( event.key == Engine.KEY_ESCAPE ) {
			Game.setState(.menuState);
		}
	}
}

class MultiplayerState {
	object menuState;
	object client;
	boolean connected;
	array players = [];
	object background;
	constructor( object menuState ) {
		.menuState = menuState;
	}
	function init() {
		MessageHandler.registerListener(Network.MESSAGE_NEW_USER_ME, self);
		MessageHandler.registerListener(Network.MESSAGE_NEW_USER, self);
		.background = Engine.loadImageResource('background.png');
		.connected = false;
		.client = Network.Client.start("test", "1", "192.168.0.15", 8899, "Player");
	}
	function quit() {
		.client.destroy();
		.client = null;
		.players = [];
		Engine.unloadImageResource(.background);
	}
	function update() {
		if( .connected ) {
			.players.each() using ( player ) {
				player.update();
			};
		}
	}
	function draw() {
		if( .connected ) {
			Engine.drawImage(.background, 0, 0);
			.players.each() using ( player ) {
				player.draw();
			};
		}
	}
	function onKeyDown( object event ) {
		if( event.key == Engine.KEY_ESCAPE ) {
			Game.setState(.menuState);
		}
	}
	function onNewUserMe( object message ) {
		object playerController;
		object player;
		player = new Player();
		playerController = new KeyboardController();
		playerController.keyLeft = Engine.KEY_LEFT;
		playerController.keyRight = Engine.KEY_RIGHT;
		player = new Player();
		player.controller = playerController;
		player.id = message.id;
		player.name = message.name;
		player.me = true;
		player.speed = 1.8;
		player.turningSpeed = 1.0;
		player.x = 200;
		player.y = 100;
		.players[] = player;
		.connected = true;
	}
	function onNewUser( object message ) {
	}
}

class MenuState extends State {
	object mainMenu;
	object multiplayerMenu;
	object currentMenu;
	boolean initialized;
	function init() {
		object testState = new TestState(self);
		object multiplayerState = new MultiplayerState(self);
		object font = new Font('font-10.png', 10, 10);
		.mainMenu = new Menu();
		.mainMenu.setSelector('Menu/simple-selector.png');
		.mainMenu.addItem(new TextMenuItem(font, "test", closure {
			Game.setState(testState);
		}));
		.mainMenu.addItem(new TextMenuItem(font, "multiplayer", closure {
			Game.setState(multiplayerState);
		}));
		.mainMenu.addItem(new TextMenuItem(font, "options"));
		.mainMenu.addItem(new TextMenuItem(font, "credits"));
		.mainMenu.addItem(new TextMenuItem(font, "quit", closure {
			Game.quit();
		}));
		.mainMenu.active = true;
		.multiplayerMenu = new Menu();
		.currentMenu = .mainMenu;
		EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
	}
	function quit() {
		.mainMenu = null;
		.multiplayerMenu = null;
	}
	function update() {
		
	}
	function draw() {
		.currentMenu.draw();
	}
	function onKeyDown( object event ) {
		if( event.key == Engine.KEY_ESCAPE ) {
			if( .currentMenu == .mainMenu ) {
				Game.quit();
			}
		}
	}
}

