 class Menu {
	static final number ITEM_PADDING = 2;
	boolean active;
	array items;
	number selectedItem;
	object selectorImage;
	constructor {
		EventHandler.registerListener(Engine.EVENT_KEYUP, self);
		EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
	}
	function setSelector( string imagePath ) {
		.selectorImage = Engine.loadImageResource(imagePath, true);
		.selectorImage.setTransparentColor(.selectorImage.getColor(0, 0, 0));
	}
	function addItem( object item ) {
		.items[] = item;
	}
	function draw() {
		if( .active ) {
			number totalItemsHeight = 0;
			number nextItemY;
			number itemX;
			object item;
			.items.each() using ( item ) {
				totalItemsHeight += item.height();
			};
			nextItemY = (Engine.screenHeight() - totalItemsHeight) / 2;
			for( number i = 0; i < .items.size(); i++ ) {
				object item = .items[i];
				itemX = item.draw(nextItemY);
				if( i == .selectedItem ) {
					Engine.drawImage(.selectorImage, itemX - Menu.ITEM_PADDING - .selectorImage.width(), nextItemY);
				}
				nextItemY += item.height() + Menu.ITEM_PADDING;
			}
		}
	}
	function onKeyDown( object event ) {
		if( .active and (not Console.active) ) {
			if( event.key == Engine.KEY_UP ) {
				number prevSelectedItem = .selectedItem;
				number lastItem = .items.size() - 1;
				if( .selectedItem == 0 ) {
					.selectedItem = lastItem;
				} else {
					.selectedItem--;
				}
				.items[prevSelectedItem].deselect();
				.items[.selectedItem].select();
			} else if( event.key == Engine.KEY_DOWN ) {
				number prevSelectedItem = .selectedItem;
				number lastItem = .items.size() - 1;
				if( .selectedItem == lastItem ) {
					.selectedItem = 0;
				} else {
					.selectedItem++;
				}
				.items[prevSelectedItem].deselect();
				.items[.selectedItem].select();
			} else if( event.key == Engine.KEY_RETURN ) {
				.items[.selectedItem].invoke();
			}
		}
	}
	function onKeyUp( object event ) {
	}
}

class MenuItem {
	function height();
	function draw( number y );
	function select();
	function deselect();
	function invoke();
}

class TextMenuItem extends MenuItem {
	object font;
	string text;
	object block;
	constructor( object font, string text ) {
		.font = font;
		.text = text;
	}
	constructor( object font, string text, object block ) {
		.font = font;
		.text = text;
		.block = block;
	}
	function height() {
		return .font.height;
	}
	function draw( number y ) {
		number x = (Engine.screenWidth() / 2) - (.font.textWidth(.text) / 2);
		.font.drawText(.text, x, y);
		return x;
	}
	function invoke() {
		if( .block ) {
			.block.invoke();
		}
	}
	function select() {
	}
	function deselect() {
	}
}

class ImageMenu {
	boolean active;
	object image;
	array items;
	function setImage( string name ) {
		.image = Engine.loadImageResource("GUI/${name}");
	}
	function setActive( boolean active ) {
		.active = active;
	}
	function addInvisibleButton( string name, number x, number y, number width, number height ) {
		object button = new InvisibleButtonMenuItem();
		button.menu = self;
		button.x = x;
		button.y = y;
		button.width = width;
		button.height = height;
		button.block = recipient();
		.items[name] = button;
	}
	function addInvisibleCheckBox( string name, number x, number y, number width, number height, boolean checked ) {
		object checkbox = new InvisibleCheckBoxMenuItem();
		checkbox.menu = self;
		checkbox.x = x;
		checkbox.y = y;
		checkbox.width = width;
		checkbox.height = height;
		checkbox.block = recipient();
		checkbox.checked = checked;
		.items[name] = checkbox;
	}
	function addInvisibleSlider( string name, number x, number y, number width, number height, array options ) {
		object slider = new InvisibleSliderMenuItem();
		slider.menu = self;
		slider.x = x;
		slider.y = y;
		slider.width = width;
		slider.height = height;
		slider.buttonX = x;
		slider.buttonY = y;
		slider.options = options;
		slider.block = recipient();
		.items[name] = slider;
	}
	function addInvisibleTextfield( string name, number x, number y, number width, number height, number maxLength ) {
		object textfield = new InvisibleTextfieldMenuItem();
		textfield.menu = self;
		textfield.x = x;
		textfield.y = y;
		textfield.width = width;
		textfield.height = height;
		textfield.maxLength = maxLength;
		.items[name] = textfield;
	}
	function addImage( string name, number x, number y ) {
		object image = new MenuImage();
		image.menu = self;
		image.x = x;
		image.y = y;
		.items[name] = image;
	}
	function getItem( string name ) {
		if( .items.keyExists(name) )
			return .items[name];
		return null;
	}
	function registerListeners() {
		.items.each() using ( item ) {
			if( item.registerListeners ) {
				EventHandler.registerListener(Engine.EVENT_KEYDOWN, item);
				EventHandler.registerListener(Engine.EVENT_MOUSEBUTTONDOWN, item);
				EventHandler.registerListener(Engine.EVENT_MOUSEBUTTONUP, item);
				EventHandler.registerListener(Engine.EVENT_MOUSEMOTION, item);
			}
		};
	}
	function draw() {
		.image and Engine.drawImage(.image, ((Engine.screenWidth() - .image.width()) / 2), 0);
		.items.each() using ( item ) {
			item.draw();
		};
	}
}

class InvisibleMenuItem {
	boolean registerListeners = true;
	function onButtonDown( object event );
	function onButtonUp( object event );
	function onMouseMotion( object event );
	function onKeyDown( object event );
}

class InvisibleButtonMenuItem extends InvisibleMenuItem {
	object menu;
	number x;
	number y;
	number width;
	number height;
	object block;
	function draw() {
		//Engine.drawRectangle(.x + ((Engine.screenWidth() - .menu.image.width()) / 2), .y, .width, .height, 255, 0, 0);
	}
	function onButtonDown( object event ) {
		if( .menu.active and (not Console.active) ) {
			if( event.button == Engine.BUTTON_LEFT ) {
				number x = .x + ((Engine.screenWidth() - .menu.image.width()) / 2);
				if( event.x >= x and event.x <= (x + .width) and event.y >= .y and event.y <= (.y + .height) ) {
					.block and .block.invoke();
				}
			}
		}
	}
}

class InvisibleCheckBoxMenuItem extends InvisibleMenuItem {
	object menu;
	number x;
	number y;
	number width;
	number height;
	object block;
	object cross;
	boolean checked;
	constructor {
		.cross = Engine.loadImageResource("GUI/cross.png");
	}
	function draw() {
		//Engine.drawRectangle(.x + ((Engine.screenWidth() - .menu.image.width()) / 2), .y, .width, .height, 255, 0, 0);
		.checked and Engine.drawImage(.cross, .x + 2 + ((Engine.screenWidth() - .menu.image.width()) / 2), .y + 1);
	}
	function onButtonDown( object event ) {
		if( .menu.active and (not Console.active) ) {
			if( event.button == Engine.BUTTON_LEFT ) {
				number x = .x + ((Engine.screenWidth() - .menu.image.width()) / 2);
				if( event.x >= x and event.x <= (x + .width) and event.y >= .y and event.y <= (.y + .height) ) {
					.checked = (not .checked);
					.block and .block.invoke();
				}
			}
		}
	}
}

class MenuImage {
	object menu;
	number x;
	number y;
	object image;
	boolean registerListeners = false;
	function draw() {
		//Engine.drawRectangle(.x + ((Engine.screenWidth() - .menu.image.width()) / 2), .y, 10, 10, 255, 0, 0);
		.image and Engine.drawImage(.image, .x + ((Engine.screenWidth() - .menu.image.width()) / 2), .y);
	}
	function setImage( string path ) {
		.image = Engine.loadImageResource(path);
	}
}

class InvisibleSliderMenuItem extends InvisibleMenuItem {
	object menu;
	number x;
	number y;
	number width;
	number height;
	object block;
	object button;
	number buttonX;
	number buttonY;
	boolean holdingButton;
	array options;
	string selectedOption;
	
	constructor {
		.button = Engine.loadImageResource("GUI/slider_button.png");
	}
	
	function draw() {
		Engine.drawImage(.button, .buttonX + 1 + ((Engine.screenWidth() - .menu.image.width()) / 2), .buttonY + 1);
	}
	
	function onButtonDown( object event ) {
		if( .menu.active and (not Console.active) ) {
			if( event.button == Engine.BUTTON_LEFT ) {
				number buttonX = .buttonX + ((Engine.screenWidth() - .menu.image.width()) / 2);
				if( event.x >= buttonX and event.x <= (buttonX + .button.width()) and event.y >= .buttonY and event.y <= (.buttonY + .button.height()) ) {
					.holdingButton = true;
				}
			}
		}
	}
	function onButtonUp( object event ) {
		if( .menu.active and (not Console.active) ) {
			if( event.button == Engine.BUTTON_LEFT ) {
				.holdingButton = false;
			}
		}
	}
	function onMouseMotion( object event ) {
		if( .menu.active and (not Console.active) and .holdingButton ) {
			number newButtonX = .buttonX + event.xrel;
			number left = .x;
			number right = .x + .width - .button.width() - 1;
			if( newButtonX > left and newButtonX < right ) {
				.buttonX = newButtonX;
			}
			if( .options ) {
				if( .options.size() > 1 ) {
					number optionItemPercentage = 100 / .options.size();
					number buttonXPercentage = ((((.buttonX - .x) + 0.0) / .width) * 100);
					number optionIndex = ((buttonXPercentage / optionItemPercentage)).floor().round();
					//Engine.printLine("item: ${optionItemPercentage}");
					//Engine.printLine("button: ${buttonXPercentage}");
					//Engine.printLine("optionIndex: ${optionIndex}");
					.block and .block.invoke(.options[optionIndex]);
					.selectedOption = .options[optionIndex];
				} else {
					.block and .block.invoke(.options[0]);
					.selectedOption = .options[0];
				}
			}
		}
	}
}

class InvisibleTextfieldMenuItem extends InvisibleMenuItem {
	object menu;
	number x;
	number y;
	number width;
	number height;
	object font;
	number maxLength;
	string text;
	boolean selected;
	constructor {
		.font = Engine.loadFont("font-menu.png", 20, 20);
	}
	function draw() {
		//Engine.drawRectangle(.x + ((Engine.screenWidth() - .menu.image.width()) / 2), .y, .width, .height, 255, 0, 0);
		.font.drawText((.selected ? "${.text}_" : .text), .x + 2 + ((Engine.screenWidth() - .menu.image.width()) / 2), .y + 4);
	}
	function onButtonDown( object event ) {
		if( .menu.active and (not Console.active) ) {
			if( event.button == Engine.BUTTON_LEFT ) {
				number x = .x + ((Engine.screenWidth() - .menu.image.width()) / 2);
				if( event.x >= x and event.x <= (x + .width) and event.y >= .y and event.y <= (.y + .height) ) {
					.selected = true;
				} else {
					.selected = false;
				}
			}
		}
	}
	function onKeyDown( object event ) {
		if( .menu.active and (not Console.active) and .selected ) {
			switch( event.key ) {
				case Engine.KEY_a:
				case Engine.KEY_b:
				case Engine.KEY_c:
				case Engine.KEY_d:
				case Engine.KEY_e:
				case Engine.KEY_f:
				case Engine.KEY_g:
				case Engine.KEY_h:
				case Engine.KEY_i:
				case Engine.KEY_j:
				case Engine.KEY_k:
				case Engine.KEY_l:
				case Engine.KEY_m:
				case Engine.KEY_n:
				case Engine.KEY_o:
				case Engine.KEY_p:
				case Engine.KEY_q:
				case Engine.KEY_r:
				case Engine.KEY_s:
				case Engine.KEY_t:
				case Engine.KEY_u:
				case Engine.KEY_v:
				case Engine.KEY_w:
				case Engine.KEY_x:
				case Engine.KEY_y:
				case Engine.KEY_z:
				case Engine.KEY_0:
				case Engine.KEY_1:
				case Engine.KEY_2:
				case Engine.KEY_3:
				case Engine.KEY_4:
				case Engine.KEY_5:
				case Engine.KEY_6:
				case Engine.KEY_7:
				case Engine.KEY_8:
				case Engine.KEY_9:
				case Engine.KEY_COMMA:
				case Engine.KEY_MINUS:
				case Engine.KEY_PERIOD:
				case Engine.KEY_SLASH:
				case Engine.KEY_SPACE: {
					if( .text.length() < .maxLength ) {
						.text += String.numberToByte(event.unicode & 0x7F).toLower();
					}
					break;
				}
				case Engine.KEY_BACKSPACE: {
					number length = .text.length();
					if( length == 1 ) {
						.text = "";
					} else if( length > 1 ) {
						.text = .text[..(length - 2)];
					}
					break;
				}
			}
		}
	}
}
