class Controller {
	function update( number deltaTime );
}

class KeyboardPlayerController extends Controller {
	object player;
	number keyLeft;
	number keyRight;
	number keyShoot;
	number keyKill;
	boolean turnLeft;
	boolean turnRight;
	boolean shoot;
	constructor( object player ) {
		.player = player;
		EventHandler.registerListener(Engine.EVENT_KEYDOWN, self);
		EventHandler.registerListener(Engine.EVENT_KEYUP, self);
	}
	function update( number deltaTime ) {
		number value = .player.turningSpeed * Entity.speedMultiplier(deltaTime);
		if( .turnLeft ) {
			if( not .player.stalling ) {
				.player.angle = Engine.addToAngle(.player.angle, -value);
			}
			.player.spriteAngle = Engine.addToAngle(.player.spriteAngle, -value);
		}
		if( .turnRight ) {
			if( not .player.stalling ) {
				.player.angle = Engine.addToAngle(.player.angle, value);
			}
			.player.spriteAngle = Engine.addToAngle(.player.spriteAngle, value);
		}
		if( .shoot ) {
			.player.shoot();
			.shoot = false;
		}
	}
	function onKeyDown( object event ) {
		if( not Console.active ) {
			if( event.key == .keyLeft ) {
				.turnLeft = true;
			} else if( event.key == .keyRight ) {
				.turnRight = true;
			} else if( event.key == .keyShoot ) {
				.shoot = true;
			} else if( event.key == .keyKill ) {
				.player.takeDamage(1000);
			}
		}
	}
	function onKeyUp( object event ) {
		if( not Console.active ) {
			if( event.key == .keyLeft ) {
				.turnLeft = false;
			} else if( event.key == .keyRight ) {
				.turnRight = false;
			}/* else if( event.key == .keyShoot ) {
				.shoot = false;
			}*/
		}
	}
}
class NetworkPlayerController extends Controller {
	object player;
	constructor( object player ) {
		.player = player;
		MessageHandler.registerListener(Network.MESSAGE_PLAYER_UPDATE, self);
	}
	function update( number deltaTime ) { }
	function onPlayerUpdate( object message ) {
		//Engine.printLine('onEntityUpdate');
		if( message.id == .player.id ) {
			if( .player.x > (message.x + 5) or .player.x < (message.x - 5) ) {
				.player.x = message.x;
			}
			if( .player.y > (message.y + 5) or .player.y < (message.y - 5) ) {
				.player.y = message.y;
			}
			.player.speed = message.speed;
			.player.angle = message.angle;
			.player.spriteAngle = message.spriteAngle;
			.player.health = message.health;
			message.shoot and .player.shoot();
		}
	}
}

