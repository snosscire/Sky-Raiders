class Weapon extends Entity {
	function shoot( object origin );
}

class Projectile extends Entity {
	boolean active;
	number damage;
}

class Bullet extends Projectile {
	static final number SPEED = 4.0;
	object sprite;
	constructor {
		.active = false;
		.speed = Bullet.SPEED;
		.sprite = Engine.loadImageResource('bullet.png');
	}
	function update( number deltaTime ) {
		number radianAngle = .angle * (Engine.PI / 180);
		number deltaSpeed = (.speed * Entity.speedMultiplier(deltaTime));
		.x += (deltaSpeed * Engine.cos(radianAngle));
		.y += (deltaSpeed * Engine.sin(radianAngle));
		if( .x < 0 or .x > Engine.screenWidth() or .y < 0 or .y > Engine.screenHeight() )
			.active = false;
	}
	function draw() {
		object rotatedSprite = .sprite.rotate(-(.angle), 1.0, false);
		Engine.drawImage(rotatedSprite, .x - (rotatedSprite.width() / 2), .y - (rotatedSprite.height() / 2));
		rotatedSprite.unload();
	}
}

class MachineGun extends Weapon {
	static final number BULLETS = 100;
	array bullets;
	array activeBullets;
	array inactiveBullets;
	constructor {
		for( number i = 0; i < MachineGun.BULLETS; i++ ) {
			.bullets[] = new Bullet();
		}
	}
	function update( number deltaTime ) {
		for( number i = 0; i < .activeBullets.size(); i++ ) {
			.bullets[.activeBullets[i]].update(deltaTime);
			if( not .bullets[.activeBullets[i]].active )
				.inactiveBullets[] = i;
		}
		for( number i = 0; i < .inactiveBullets.size(); i++ ) {
			.activeBullets.deleteAt(.inactiveBullets[i]);
		}
		.inactiveBullets = [];
	}
	function draw() {
		for( number i = 0; i < .activeBullets.size(); i++ ) {
			.bullets[.activeBullets[i]].draw();
		}
	}
	function shoot( object origin ) {
		for( number i = 0; i < MachineGun.BULLETS; i++ ) {
			if( not .bullets[i].active ) {
				.bullets[i].x = origin.x;
				.bullets[i].y = origin.y;
				.bullets[i].angle = origin.spriteAngle;
				.bullets[i].active = true;
				.activeBullets[] = i;
				break;
			}
		}
	}
}

