class Weapon extends Entity {
	function shoot( object origin );
}

class Projectile extends Entity {
	boolean active;
	number damage;
}

class Bullet extends Projectile {
	object origin;
	object sprite;
	object collisionRectangle;
	constructor {
		raise new Error('Bullet: Wrong constructor.');
	}
	constructor( object origin ) {
		.origin = origin;
		.active = false;
		.speed = Global.MachineGunBulletSpeed;
		.sprite = Engine.loadImageResource(Global.MachineGunBulletSprite);
		.collisionRectangle = new Rectangle();
		.collisionRectangle.width = .sprite.width();
		.collisionRectangle.height = .sprite.height();
	}
	function update( number deltaTime, object currentMap ) {
		number radianAngle = .angle * Engine.PI180;
		number deltaSpeed = (.speed * Entity.speedMultiplier(deltaTime));
		.x += (deltaSpeed * Engine.cos(radianAngle));
		.y += (deltaSpeed * Engine.sin(radianAngle));
		if( .x < 0 or .x > currentMap.getWidth() or .y < 0 or .y > currentMap.getHeight() )
			.active = false;
		if( .active ) {
			Game.players.each() using ( player ) {
				if( .origin.id != player.id and player.collide(self) ) {
					.active = false;
					player.takeDamage(.origin, Global.MachineGunBulletDamage);
				}
			};
		}
	}
	function draw( object playerCamera ) {
		number x = .x - playerCamera.left;
		number y = .y - playerCamera.top;
		object rotatedSprite = .sprite.rotate(-(.angle), 1.0, false);
		Engine.drawImage(rotatedSprite, x - (rotatedSprite.width() / 2), y - (rotatedSprite.height() / 2));
		rotatedSprite.unload();
	}
	function collisionObject() {
		.collisionRectangle.x = .x;
		.collisionRectangle.y = .y;
		.collisionRectangle.recalculate();
		return .collisionRectangle;
	}
}

class MachineGun extends Weapon {
	object owner;
	array bullets;
	array activeBullets;
	array inactiveBullets;
	constructor {
		raise new Error('MachineGun: Wrong constructor.');
	}
	constructor( object owner ) {
		.owner = owner;
		for( number i = 0; i < Global.MachineGunBulletOnScreenAmount; i++ ) {
			.bullets[] = new Bullet(.owner);
		}
	}
	function update( number deltaTime, object currentMap ) {
		for( number i = 0; i < .activeBullets.size(); i++ ) {
			.bullets[.activeBullets[i]].update(deltaTime, currentMap);
			if( not .bullets[.activeBullets[i]].active )
				.inactiveBullets[] = i;
		}
		for( number i = 0; i < .inactiveBullets.size(); i++ ) {
			if( .inactiveBullets[i] >= 0 and .inactiveBullets[i] < .activeBullets.size() )
				.activeBullets.deleteAt(.inactiveBullets[i]);
		}
		.inactiveBullets = [];
	}
	function draw( object playerCamera ) {
		for( number i = 0; i < .activeBullets.size(); i++ ) {
			.bullets[.activeBullets[i]].draw(playerCamera);
		}
	}
	function shoot( object origin ) {
		for( number i = 0; i < Global.MachineGunBulletOnScreenAmount; i++ ) {
			if( not .bullets[i].active ) {
				.bullets[i].x = origin.x;
				.bullets[i].y = origin.y;
				.bullets[i].angle = origin.spriteAngle;
				.bullets[i].active = true;
				.activeBullets[] = i;
				break;
			}
		}
	}
}

