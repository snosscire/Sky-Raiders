namespace modifies Network {
	class InitializeJoinMessage {
		number type;
		string name;
		constructor( string name ) {
			.type = Network.MESSAGE_INITIALIZE_JOIN;
			.name = name;
		}
		static function fromData( string& data, boolean hasType ) {
			object message = new Network.InitializeJoinMessage();
			message.type = (hasType ? Network.readByteFromData(data) : Network.MESSAGE_INITIALIZE_JOIN);
			message.name = Network.readStringFromData(data);
			return message;
		}
		function toData() {
			string data;
			Network.addByteToData(data, .type);
			Network.addStringToData(data, .name);
			return data;
		}
	}
	class NewPlayerMessage {
		number type;
		number id;
		string name;
		number x;
		number y;
		static function fromPlayer( object player ) {
			object message = new Network.NewPlayerMessage();
			message.type = Network.MESSAGE_NEW_PLAYER;
			message.id = player.id;
			message.name = player.name;
			message.x = player.x;
			message.y = player.y;
			return message;
		}
		static function fromData( string& data, boolean hasType ) {
			object message = new Network.NewPlayerMessage();
			message.type = (hasType ? Network.readByteFromData(data) : Network.MESSAGE_NEW_PLAYER);
			message.id = Network.readByteFromData(data);
			message.name = Network.readStringFromData(data);
			message.x = Network.readDoubleFromData(data);
			message.y = Network.readDoubleFromData(data);
			return message;
		}
		function toData() {
			string data;
			Network.addByteToData(data, .type);
			Network.addByteToData(data, .id);
			Network.addStringToData(data, .name);
			Network.addDoubleToData(data, .x);
			Network.addDoubleToData(data, .y);
			return data;
		}
	}
	class DisconnectMeMessage {
		number type;
		constructor {
			.type = Network.MESSAGE_DISCONNECT_ME;
		}
	}
	class PlayerUpdateMessage {
		number type;
		number id;
		number x;
		number y;
		number speed;
		number angle;
		number spriteAngle;
		number health;
		boolean shoot;
		static function fromPlayer( object player ) {
			object message = new Network.PlayerUpdateMessage();
			message.type = Network.MESSAGE_PLAYER_UPDATE;
			message.id = player.id;
			message.x = player.x;
			message.y = player.y;
			message.speed = player.speed;
			message.angle = player.angle;
			message.spriteAngle = player.spriteAngle;
			message.health = player.health;
			message.shoot = player.shotWeaponInLastUpdate();
			return message;
		}
		static function fromData( string& data, boolean hasType ) {
			object message = new Network.PlayerUpdateMessage();
			message.type = (hasType ? Network.readByteFromData(data) : Network.MESSAGE_PLAYER_UPDATE);
			message.id = Network.readByteFromData(data);
			message.x = Network.readDoubleFromData(data);
			message.y = Network.readDoubleFromData(data);
			message.speed = Network.readDoubleFromData(data);
			message.angle = Network.readDoubleFromData(data);
			message.spriteAngle = Network.readDoubleFromData(data);
			message.health = Network.readByteFromData(data);
			message.shoot = (Network.readByteFromData(data) ? true : false);
			return message;
		}
		function toData() {
			string data;
			Network.addByteToData(data, .type);
			Network.addByteToData(data, .id);
			Network.addDoubleToData(data, .x);
			Network.addDoubleToData(data, .y);
			Network.addDoubleToData(data, .speed);
			Network.addDoubleToData(data, .angle);
			Network.addDoubleToData(data, .spriteAngle);
			Network.addByteToData(data, .health);
			Network.addByteToData(data, (.shoot ? 1 : 0));
			return data;		
		}
	}
	class PlayerHitMessage {
		number type;
		number id;
		number health;
		number shooter;
		number damage;
		constructor( object player, object shooter, number damage ) {
			.type = Network.MESSAGE_PLAYER_HIT;
			.id = player.id;
			.health = player.health;
			.shooter = shooter.id;
			.damage = damage;
		}
		static function fromData( string& data, boolean hasType ) {
			object message = new Network.PlayerHitMessage();
			message.type = (hasType ? Network.readByteFromData(data) : Network.MESSAGE_PLAYER_HIT);
			message.id = Network.readByteFromData(data);
			message.health = Network.readByteFromData(data);
			message.shooter = Network.readByteFromData(data);
			message.damage = Network.readByteFromData(data);
			return message;
		}
		function toData() {
			string data;
			Network.addByteToData(data, .type);
			Network.addByteToData(data, .id);
			Network.addByteToData(data, .health);
			Network.addByteToData(data, .shooter);
			Network.addByteToData(data, .damage);
			return data;
		}
	}
	class RoundEndMessage {
		number type;
		number winner;
		constructor( number winner ) {
			.type = Network.MESSAGE_ROUND_END;
			.winner = winner;
		}
		static function fromData( string& data, boolean hasType ) {
			object message = new Network.RoundEndMessage();
			message.type = (hasType ? Network.readByteFromData(data) : Network.MESSAGE_ROUND_END);
			message.winner = Network.readByteFromData(data);
			return message;
		}
		function toData() {
			string data;
			Network.addByteToData(data, .type);
			Network.addByteToData(data, .winner);
			return data;
		}
	}
}

