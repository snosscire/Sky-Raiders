class Game {
	static function registerConsoleCommands() {
		Console.registerCommand('start_test', closure( parameters ) {
			Game.setState(Game.testState());
		});
		Console.registerCommand('connect', closure( parameters ) {
			if( parameters.size() <= 2 ) {
				string host = (parameters.size() >= 1 ? parameters[0] : 'localhost');
				number port = (parameters.size() == 2 ? parameters[1].toNumber() : Global.ServerDefaultPort);
				boolean connected = false;
				Console.printLine("------------------ connect ----------------------");
				Console.printLine("connecting to ${host}:${port}...");
				Console.flush();
				Network.disconnect();
				connected = Network.connect(host, port, 'Player');
				if( connected ) {
					Console.printLine('waiting for response...');
					Game.setState(Game.multiplayerState());
				} else {
					Console.printLine('failed.');
				}
			} else {
				Console.printLine('usage: connect [host] [port]');
			}
		});
		Console.registerCommand('disconnect', closure( parameters ) {
			Console.printLine('disconnecting from server...');
			Console.flush();
			Network.disconnect();
			Console.printLine('done.');
		});
		Console.registerCommand('msg_disable', closure( parameters ) {
			MessageHandler.active = false;
			Console.printLine("messagehandler status... ${MessageHandler.active}");
		});
		Console.registerCommand('msg_enable', closure( parameters ) {
			MessageHandler.active = true;
			Console.printLine("messagehandler status... ${MessageHandler.active}");
		});
		Console.registerCommand('show_collision_rects', closure( parameters ) {
			Game.showCollisionRectangles = true;
			Console.printLine("collision rectangles status... ${Game.showCollisionRectangles}");
		});
		Console.registerCommand('hide_collision_rects', closure( parameters ) {
			Game.showCollisionRectangles = false;
			Console.printLine("collision rectangles status... ${Game.showCollisionRectangles}");
		});
	}
}

